#!/bin/env python
# -*- encoding: utf-8 -*-

""" Create an item (task) in Todoist from piping mails from mutt.

Meant to be called from mutt by piping the full mail to the script. Example of
macro config for mutt::

    macro index,pager GG "<pipe-entry>less > \
        /tmp/mutt-$USER-mail-todoist.tmp<enter>\
        <shell-escape>todoist_add_mail_item \
            /tmp/mutt-$USER-mail-todoist.tmp<enter>"

You will then be asked for content, project, labels and date.

TODOs:

- Add unittesting
- Add bash coloring

"""

from __future__ import unicode_literals
from __future__ import print_function

import sys
import signal
from threading import Thread
import argparse
from termcolor import cprint

import todoist_gtd_utils
import todoist_gtd_utils.mail
from todoist_gtd_utils import utils
from todoist_gtd_utils import TodoistGTD
from todoist_gtd_utils import userinput as ui
from todoist_gtd_utils import menus


def signal_handler(signal, frame):
    """Prettier abort"""
    print("\nQuit, not commit")
    sys.exit(0)


def create_api(args):
    """Setup the Todoist API.

    To be called in a thread, which is why it adds the api through the `global`
    syntax.

    """
    global api
    api = TodoistGTD(configfiles=args.configfile, token=args.token)
    if api.is_authenticated():
        api.sync()


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    p = ui.get_argparser(usage="%(prog)s [options] MAILFILE",
                         description=__doc__)
    p.add_argument('mail', metavar="MAILFILE", type=argparse.FileType('r'),
                   help="Mail to store as note. Defaults to piped input, e.g. "
                   "from mutt",
                   )
    args = p.parse_args()
    mail = todoist_gtd_utils.mail.SimpleMailParser(args.mail)

    print()
    cprint(mail.get_presentation('Date', 'From', '_Sender', 'To', '_Cc',
                                 'Subject', body=False), attrs=['bold'])
    print()
    cprint(utils.trim_too_long(mail.get_body_text(), 5000), attrs=['dark'])
    # TODO: trim out quoted text, if not enough space in 1000 chars (or 20
    # lines)
    print()

    t = Thread(target=create_api, name='create_api', kwargs={'args': args})
    t.start()

    try:
        what = ui.ask_choice('New project or single task?', default='task',
                             choices=['project', 'task'])
    except EOFError:
        sys.exit(0)
    goal = None
    new_pr = None
    if what == 0:
        goal = ui.get_input("Project end goal (project name)? ")
    next = ui.get_input("What's the Next action? ")

    t.join()

    # Authenticate
    if not api.is_authenticated():
        ui.login_dialog(api)
        api.sync()

    if goal:
        parent = api.get_projects_by_name('Work')
        sub_pr = parent.get_child_projects()
        # - ask for what position
        pos = ui.ask_choice_of_list("Choose position of new project:",
                                    api.get_project_name(sub_pr))
        pos = sub_pr[pos]['item_order']
        new_pr = api.projects.add(goal, indent=parent['indent'] + 1,
                                  color=parent['color'], item_order=pos)
        item = api.items.add('* Original request', project_id=new_pr['id'])
        api.notes.add(item['id'], mail.get_presentation('Date', '*From', 'To',
                                                        'Message-Id',
                                                        '_Reply-To',
                                                        '*Subject', '_Sender',
                                                        color=False))
        api.force_commit()
        goal = new_pr['id']
        print("Project created")

    item = ui.dialog_new_item(api, name=next, project=new_pr)
    cprint("\nCreated new item:\n{}\n".format(item), attrs=['bold'])
    api.force_commit()
    api.notes.add(item['id'], mail.get_presentation('Date', '*From', 'To',
                                                    'Message-Id', '_Reply-To',
                                                    '*Subject', '_Sender',
                                                    color=False))
    # Add file attachments, if given in mail
    for a_type, a_name, a_content in mail.get_attachments():
        print("File: {} ({}) ({} bytes)".format(a_name, a_type,
                                                len(a_content)))
        if ui.ask_confirmation("Want to upload/save this attachment?"):
            resp = api.upload_add_string(a_content, a_name)
            if resp['upload_state'] != 'completed':
                print("Upload status of '{}': {}".format(resp['upload_state'],
                                                         resp['file_name']))
            api.notes.add(item['id'], 'Mail attachment: {}'.format(a_name),
                          file_attachment=resp)

    api.force_commit()
    api.sync()
    menus.menu_item(api, item)
