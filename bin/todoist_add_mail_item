#!/bin/env python
# -*- encoding: utf-8 -*-

""" Create an item (task) in Todoist from piping mails from mutt.

Meant to be called from mutt by piping the full mail to the script. Example of
macro config for mutt::

    macro index,pager GG "<pipe-entry>less > \
        /tmp/mutt-$USER-mail-todoist.tmp<enter>\
        <shell-escape>todoist_add_mail_item \
            /tmp/mutt-$USER-mail-todoist.tmp<enter>"

You will then be asked for content, project, labels and date.

TODOs:

- Add unittesting!
- Add bash coloring
- Prettify presentation of mail headers on multiple, indented lines
- Support signals, like CTRL+C and CTRL+D when getting input

"""

from __future__ import unicode_literals
from __future__ import print_function

import sys
import signal
from threading import Thread
import argparse
from termcolor import cprint

import todoist_gtd_utils
import todoist_gtd_utils.mail
from todoist_gtd_utils import utils
from todoist_gtd_utils import TodoistGTD
from todoist_gtd_utils import userinput as ui


def signal_handler(signal, frame):
    """Prettier abort"""
    print("\nQuit, not commit")
    sys.exit(0)


def ask_project(api, default):
    projects = dict((unicode(p['name']), p['id']) for p in api.projects.all())
    return ui.ask_choice('Project', choices=projects, default=default,
                         category="project")


def ask_labels(api, preset_labels):
    all_labels = dict((unicode(l['name']).lower(), l['id']) for l in
                      api.labels.all())
    return ui.ask_multichoice('Labels', choices=all_labels,
                              default=preset_labels, category="labels")


def ask_date(api, preset_date):
    return ui.ask_choice('Date', choices=ui.dateformats, default=preset_date,
                         category="date", regex_choices=True)


def ask_priority(api, preset_priority):
    return ui.ask_choice('Priority', choices=['1', '2', '3', '4'],
                         default=preset_priority, category="priority")


def ask_description(api, preset_description):
    ret = ui.get_input("Set description [{}]: ".format(preset_description))
    if not ret:
        return preset_description
    return ret


def gather_input(content, api, args, project=None):
    """Ask user for info about the new item."""
    content, proj, date, labels, priority = ui.parse_content(api, content)
    print()
    # TODO: colorize invalid project and label names (# and @), to highlight
    # what looks like typos
    print(content)
    print()

    if not project:
        project = ask_project(api, proj)
    labels = ask_labels(api, labels)
    date = ask_date(api, date)
    priority = ask_priority(api, priority)
    return content, project, date, labels, priority


def create_api(args):
    """Setup the Todoist API.

    To be called in a thread, which is why it adds the api through the `global`
    syntax.

    """
    global api
    api = TodoistGTD(configfiles=args.configfile, token=args.token)
    if api.is_authenticated():
        api.sync()


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    p = ui.get_argparser(usage="%(prog)s [options] MAILFILE",
                         description=__doc__)
    p.add_argument('mail', metavar="MAILFILE", type=argparse.FileType('r'),
                   help="Mail to store as note. Defaults to piped input, e.g. "
                   "from mutt",
                   )
    args = p.parse_args()
    mail = todoist_gtd_utils.mail.SimpleMailParser(args.mail)

    print()
    cprint(mail.get_presentation('Date', 'From', '_Sender', 'To', '_Cc',
                                 'Subject', body=False), attrs=['bold'])
    print()
    cprint(utils.trim_too_long(mail.get_body(), 2000), attrs=['dark'])
    # TODO: trim out quoted text, if not enough space in 1000 chars (or 20
    # lines)
    print()

    t = Thread(target=create_api, name='create_api', kwargs={'args': args})
    t.start()

    what = ui.ask_choice('New project or single task?', default='task',
                         choices=['project', 'task'])
    goal = None
    if what == 'project':
        goal = ui.get_input("Project end goal (project name)? ")

    t.join()

    # Authenticate
    if not api.is_authenticated():
        ui.login_dialog(api)
        api.sync()

    if goal:
        parent = api.get_projects_by_name('Work')
        sub_pr = parent.get_child_projects()
        # - ask for what position
        pos = ui.ask_choice_of_list("Choose position of new project:",
                                    api.get_project_name(sub_pr))
        pos = sub_pr[pos]['item_order']
        new_pr = api.projects.add(goal, indent=parent['indent'] + 1,
                                  color=parent['color'], item_order=pos)
        i = api.items.add('* Original request', project_id=new_pr['id'])
        api.notes.add(i['id'], mail.get_presentation('Date', '*From', 'To',
                                                     'Message-Id', '_Reply-To',
                                                     '*Subject', '_Sender'))
        api.force_commit()
        goal = new_pr['id']
        print("Project created")

    next = ui.get_input("What's the Next action? ")
    next, project, date, labels, priority = gather_input(next, api, args,
                                                         project=goal)
    print("Project: {}".format(project))
    api_pri = utils.frontend_priority_to_api(priority)

    i = api.items.add(next + ' :email:.', priority=api_pri, indent=1,
                      project_id=project, date_string=date, labels=labels)
    print("\nCreated new item:\n{}\n".format(i))
    api.force_commit()
    api.notes.add(i['id'], mail.get_presentation('Date', '*From', 'To',
                                                 'Message-Id', '_Reply-To',
                                                 '*Subject', '_Sender'))
    api.force_commit()
    api.sync()
    # For post-edits by user:

    def delete_item():
        i.delete()
        api.force_commit()
        print("Item deleted. Most commands now doesn't work.")

    def set_project():
        p = ask_project(api, i.get_project()['name'])
        i.update(project_id=p)
        api.force_commit()
        print("Project updated")

    def set_labels():
        l = ask_labels(api, api.get_label_name(i['labels']))
        i.update(labels=l)
        api.force_commit()
        print("Labels updated")

    def set_date():
        d = ask_date(api, i['date_string'])
        i.update(date_string=d)
        api.force_commit()
        print("Date updated")

    def set_priority():
        p = ask_priority(api, i['priority'])
        i.update(priority=p)
        api.force_commit()
        print("Priority updated")

    def set_description():
        c = ask_description(api, i['content'])
        i.update(content=c)
        api.force_commit()
        print("Description updated")

    def view_item():
        # TODO: User item.get_presentation() instead! Move missing parts there,
        # if needed
        cprint(i, attrs=['bold'])
        print('')
        for n, note in enumerate(api.notes.all(lambda x: x['item_id'] ==
                                               i['id'])):
            cprint("Note {}, from {}:".format(n, note['posted']),
                   on_color='on_grey', color='blue')
            cprint(note['content'], attrs=['dark'])
            print('')

    def edit_attachments():
        # TODO
        # 1. list attachments
        # 2. choose an attachment
        # 3. start editor to edit it
        # 4. if saved, update in todoist
        pass

    ui.ask_menu({'D': ('Delete item', delete_item),
                 'l': ('Edit labels', set_labels),
                 'd': ('Edit date', set_date),
                 'e': ('Edit description', set_description),
                 'p': ('Set project', set_project),
                 'v': ('View task', view_item),
                 'r': ('Set priority', set_priority),
                 'a': ('Edit attachments', edit_attachments),
                 }, prompt="Edit more? (dltpraQ)")
