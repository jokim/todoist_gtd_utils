#!/bin/env python
# -*- encoding: utf-8 -*-

""" Create an item (task) in Todoist from piping mails from mutt.

Meant to be called from mutt by piping the full mail to the script. Example of
macro config for mutt::

    macro index,pager GG "<pipe-entry>less > \
        /tmp/mutt-$USER-mail-todoist.tmp<enter>\
        <shell-escape>todoist_add_mail_item \
            /tmp/mutt-$USER-mail-todoist.tmp<enter>"

You will then be asked for content, project, labels and date.

TODOs:

- Add unittesting!
- Add bash coloring
- Prettify presentation of mail headers on multiple, indented lines
- Support signals, like CTRL+C and CTRL+D when getting input

"""

from __future__ import unicode_literals
from __future__ import print_function

import sys
import signal
from threading import Thread
import re
import argparse
from todoist.api import SyncError
import todoist_gtd_utils
import todoist_gtd_utils.mail
from todoist_gtd_utils import utils
from todoist_gtd_utils import TodoistGTD


def signal_handler(signal, frame):
    """Prettier abort"""
    print("\nQuit, not commit")
    sys.exit(0)


def do_commit(api):
    """Make sure a commit with Todoist is commited."""
    try:
        api.commit(raise_on_error=True)
    except SyncError:
        # Sometimes, the sync fails due to "Invalid temporary id
        # (INVALID_TEMPID)". Haven't dug out the cause, but a retry most often
        # fix the issue:
        api.commit(raise_on_error=True)
    return True


def parse_content(api, content):
    """Get labels, projects and date out of a content string.

    NOT as advanced as Todoist own parser. Does for instance not support
    white space in labels and projects.

    :rtype: list
    :return:
        The different parts that an item could consist of:

        1. The content, where the other parts have been stripped out.
        2. Project, if set. By it's project name, for now. Defaults to Inbox. #
           TODO: Change to project id!
        3. Date, if set. Only a limited format are accepted here, not all
           supported by Todoist.
        4. Labels, if set. Returned by its label names.
        5. Priority, in the range 1 (highest) to 4 (default, lowest).

    """
    # Find project (#projectname)
    project = "Inbox"
    r = re.search('#(\w+)', content)
    if r:
        p = r.groups()[0]
        try:
            api.get_projects_by_name(p)
        except Exception:
            pass
        else:
            project = p
            content = content.replace('#' + p, '')

    # Find labels (@labelname)
    labelnames = set(l['name'].lower() for l in api.labels.all())
    labels = set(l for l in re.findall('\@(\w+)', content)
                 if l.lower() in labelnames)
    for l in labels:
        content = content.replace('@' + l, '')

    content, date = parse_date(content)

    # Find priority
    # Note: Frontend consider 1 highest, while the API consider 4 the highest.
    # In here, we have the frontend's perspective.
    priority = 4
    match = re.search("!!([1-4])", content)
    if match:
        priority = match.group(1)
        content = content.replace('!!{}'.format(priority), '')

    # Remove superfluous spaces
    content = re.sub('  +', ' ', content).strip()
    return content, project, date, labels, priority

dateformats = ('(mon|tues|wednes|thurs|fri|satur|sun)day', 'tomorrow', 'today',
               'next month', 'next year', '[0-3]?[0-9]\. [a-z]{3,6}( \d{4})?',
               '\d+ (day|week|month|year)s?',
               )
timeformats = ('[0-1][0-9]:[0-5][0-9]',)


def parse_date(content):
    """Return first date format found, and remove from content"""
    for d in dateformats:
        m = re.search('({}( {})?)'.format(d, timeformats), content)
        if m:
            return content.replace(m.groups()[0], ''), m.groups()[0]
    return content, None


def gather_input(content, api, args):
    """Ask user for info about the new item."""
    content, project, date, labels, priority = parse_content(api, content)

    print()
    # TODO: colorize invalid project and label names (# and @), to highlight
    # what looks like typos
    print(content)
    print()

    projects = set(unicode(p['name']) for p in api.projects.all())
    project = utils.ask_choice('Project', choices=projects, default=project,
                               category="project")
    all_labels = set(unicode(l['name']).lower() for l in api.labels.all())
    labels = utils.ask_multichoice('Labels', choices=all_labels,
                                   default=labels, category="labels")
    date = utils.ask_choice('Date', choices=dateformats, default=date,
                            category="date", regex_choices=True)
    priority = utils.ask_choice('Priority', choices=['1', '2', '3', '4'],
                                default=priority, category="priority")
    return content, project, date, labels, priority


def create_api(args):
    """Setup the Todoist API.

    To be called in a thread, which is why it adds the api through the `global`
    syntax.

    """
    global api
    api = TodoistGTD(configfiles=args.configfile, token=args.token)
    if api.is_authenticated():
        api.sync()

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    p = utils.get_argparser(usage="%(prog)s [options] MAILFILE",
                            description=__doc__)
    p.add_argument('mail', metavar="MAILFILE", type=argparse.FileType('r'),
                   help="Mail to store as note. Defaults to piped input, e.g. "
                   "from mutt",
                   )
    args = p.parse_args()
    mail = todoist_gtd_utils.mail.SimpleMailParser(args.mail)

    print()
    print(mail.get_presentation('Date', 'From', '_Sender', 'To', 'Cc',
                                'Subject', body=False))
    print()

    t = Thread(target=create_api, name='create_api', kwargs={'args': args})
    t.start()
    content = unicode(raw_input("New task: "), 'utf-8')
    t.join()
    # Authenticate
    if not api.is_authenticated():
        utils.login_dialog(api)
        api.sync()

    while True:
        content, project, date, labels, priority = gather_input(content, api,
                                                                args)
        api_pri = utils.frontend_priority_to_api(priority)

        # Add emoji for mark that item came by email:
        i = api.items.add(content + ' :email:', priority=api_pri, indent=1,
                          project_id=api.get_projects_by_name(project)['id'],
                          date_string=date, labels=api.get_label_id(labels))
        print("\nNew item:\n{}\n".format(i))
        if utils.ask_confirmation("Okay to create?", args):
            do_commit(api)
            api.notes.add(i['id'], mail.get_presentation('Date', '*From', 'To',
                                                         'Message-Id',
                                                         '_Reply-To',
                                                         '*Subject',
                                                         '_Sender'))
            do_commit(api)
            print("\nItem created")
            api.sync()
            new = api.items.all(lambda x: x['id'] == i['id'])[0]
            print(new)
            break
        else:
            print("\nGoing all over again...\n")
