#!/bin/env python
# -*- encoding: utf-8 -*-

""" Create an item (task) in Todoist from piping mails from mutt.

Meant to be called from mutt by piping the full mail to the script. Example of
macro config for mutt::

    macro index,pager GG "<pipe-entry>less > \
        /tmp/mutt-$USER-mail-todoist.tmp<enter>\
        <shell-escape>todoist_add_mail_item \
            /tmp/mutt-$USER-mail-todoist.tmp<enter>"

You will then be asked for content, project, labels and date.

TODOs:

- Add unittesting!
- Add bash coloring
- Prettify presentation of mail headers on multiple, indented lines
- Support signals, like CTRL+C and CTRL+D when getting input

"""

from __future__ import unicode_literals
from __future__ import print_function

import sys
import signal
from threading import Thread
import argparse
import todoist_gtd_utils
import todoist_gtd_utils.mail
from todoist_gtd_utils import utils
from todoist_gtd_utils import TodoistGTD
from todoist_gtd_utils import userinput


def signal_handler(signal, frame):
    """Prettier abort"""
    print("\nQuit, not commit")
    sys.exit(0)


def gather_input(content, api, args):
    """Ask user for info about the new item."""
    content, project, date, labels, priority = userinput.parse_content(api,
                                                                       content)

    print()
    # TODO: colorize invalid project and label names (# and @), to highlight
    # what looks like typos
    print(content)
    print()

    projects = set(unicode(p['name']) for p in api.projects.all())
    project = utils.ask_choice('Project', choices=projects, default=project,
                               category="project")
    all_labels = set(unicode(l['name']).lower() for l in api.labels.all())
    labels = utils.ask_multichoice('Labels', choices=all_labels,
                                   default=labels, category="labels")
    date = utils.ask_choice('Date', choices=userinput.dateformats,
                            default=date, category="date", regex_choices=True)
    priority = utils.ask_choice('Priority', choices=['1', '2', '3', '4'],
                                default=priority, category="priority")
    return content, project, date, labels, priority


def create_api(args):
    """Setup the Todoist API.

    To be called in a thread, which is why it adds the api through the `global`
    syntax.

    """
    global api
    api = TodoistGTD(configfiles=args.configfile, token=args.token)
    if api.is_authenticated():
        api.sync()

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    p = utils.get_argparser(usage="%(prog)s [options] MAILFILE",
                            description=__doc__)
    p.add_argument('mail', metavar="MAILFILE", type=argparse.FileType('r'),
                   help="Mail to store as note. Defaults to piped input, e.g. "
                   "from mutt",
                   )
    args = p.parse_args()
    mail = todoist_gtd_utils.mail.SimpleMailParser(args.mail)

    print()
    print(mail.get_presentation('Date', 'From', '_Sender', 'To', 'Cc',
                                'Subject', body=False))
    print()

    t = Thread(target=create_api, name='create_api', kwargs={'args': args})
    t.start()
    content = unicode(raw_input("New task: "), 'utf-8')
    t.join()
    # Authenticate
    if not api.is_authenticated():
        utils.login_dialog(api)
        api.sync()

    while True:
        content, project, date, labels, priority = gather_input(content, api,
                                                                args)
        api_pri = utils.frontend_priority_to_api(priority)

        # Add emoji for mark that item came by email:
        i = api.items.add(content + ' :email:', priority=api_pri, indent=1,
                          project_id=api.get_projects_by_name(project)['id'],
                          date_string=date, labels=api.get_label_id(labels))
        print("\nNew item:\n{}\n".format(i))
        if utils.ask_confirmation("Okay to create?", args):
            api.force_commit()

            api.notes.add(i['id'], mail.get_presentation('Date', '*From', 'To',
                                                         'Message-Id',
                                                         '_Reply-To',
                                                         '*Subject',
                                                         '_Sender'))
            api.force_commit()
            print("\nItem created")
            api.sync()
            new = api.items.all(lambda x: x['id'] == i['id'])[0]
            print(new)
            break
        else:
            print("\nGoing all over again...\n")
