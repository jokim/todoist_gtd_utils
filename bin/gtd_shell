#!/bin/env python
# -*- encoding: utf-8 -*-

"""Get a shell to access Todoist and this package, for developers.

For now, a python shell is returned, with the classes initiated. Maybe a more
user friendly shell might be used in the future.

"""

from __future__ import print_function
from __future__ import unicode_literals

import rlcompleter
import readline
import code

from todoist_gtd_utils import userinput
from todoist_gtd_utils import utils
from todoist_gtd_utils import menus
from todoist_gtd_utils import TodoistGTD

if __name__ == '__main__':
    p = userinput.get_argparser(
            description="Clean up in Todoist, for GTD setup")
    args = p.parse_args()

    print("Start TodoistGTD shell…")
    api = TodoistGTD(configfiles=args.configfile, token=args.token)
    if not api.is_authenticated():
        userinput.login_dialog(api)
    print("Sync with Todoist…")
    api.sync()
    print("Status: {} projects, {} items, {} labels"
          .format(len(api.projects.all()), len(api.items.all()),
                  len(api.labels.all())))

    del p, print_function

    print("Variables:")
    vars = [a for a in locals().copy() if not a.startswith('_')]
    vars.sort()
    print("  (%s)" % ', '.join(vars))
    print("")

    readline.parse_and_bind('tab:complete')
    # code.sys.ps1 = '\033[1;95m>>> \033[;37m'
    # code.sys.ps2 = '\033[1;93m... \033[;37m'
    # code.sys.ps1 = 'cerepy >>> '
    # code.sys.ps2 = '... '
    code.interact(local=locals())
    print("Quit")
